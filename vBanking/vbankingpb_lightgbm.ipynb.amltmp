{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import lightgbm as lgb\n",
        "from hyperopt import Trials, fmin, tpe, space_eval, STATUS_OK, hp\n",
        "from sklearn.model_selection import StratifiedKFold"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547491476
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rc(\"font\", size=14)\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import math\n",
        "from sklearn.model_selection import train_test_split\n",
        "#from sklearn.feature_selection import RFE\n",
        "from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc\n",
        "import seaborn as sns\n",
        "sns.set(style=\"white\")\n",
        "sns.set(style=\"whitegrid\", color_codes=True)\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547495472
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547499288
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Experiment\n",
        "from azureml.core import Workspace, Dataset"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547503147
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import shap\n",
        "shap.initjs()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547508357
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def delFile(filetoDelete):\n",
        "    if os.path.exists(filetoDelete):\n",
        "        os.remove(filetoDelete)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547512179
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "subscription_id = '6ed9d167-b2e6-41b8-9500-35e6df64d9dc'\n",
        "resource_group = 'MLRG'\n",
        "workspace_name = 'erbbimlws'\n",
        "\n",
        "workspace = Workspace(subscription_id, resource_group, workspace_name)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547516895
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "experiment = Experiment(workspace = workspace, name = \"vBankingPB_LGBM\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547520779
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run = experiment.start_logging(snapshot_directory=None)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547524659
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = Dataset.get_by_name(workspace, name='vBankingPB')\n",
        "df = dataset.to_pandas_dataframe()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547538839
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('max_columns', None) #display all columns\n",
        "#pd.reset_option(“max_columns”) #to return to default"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547543599
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547550618
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['vBankingFlag'].value_counts().plot(kind = 'pie',y = 'vBankingFlag',figsize=(5, 5),title = 'vBankingFlag',autopct='%1.1f%%')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547728119
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "categ = []\n",
        "for col in df.columns:       \n",
        "       if df[col].dtypes=='object':\n",
        "            categ.append(col)\n",
        "categ            "
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(columns = ['Customer_ID','Year','Month','Remmitances_In_nonGR_1Y_MaxAmount','Remmitances_In_nonGR_1Y_Amount','education_Code',\\\n",
        "'Link_contacts_Last_3m_neu','Eb_Logins_3M_Months_num','Eb_Logins_3M_num','Legal_Person','City','Age_Band','Occupation','Global_SubSubSegment'])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547732058
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def binF(x):\n",
        "    if x is False:\n",
        "        z = 0\n",
        "    elif math.isnan(x):\n",
        "        z = 0\n",
        "    else:\n",
        "        z =1\n",
        "    return z"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547735773
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['vBankingFlag'] = df['vBankingFlag'].apply(binF)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547740352
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#dummy variables\n",
        "for col in df.columns:       \n",
        "       if df[col].dtypes=='object':\n",
        "            df = pd.get_dummies(df, prefix=col + '_', columns=[col])\n",
        "            #df.drop(columns=col, inplace = True)\n",
        "            "
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547745950
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for col in df.columns:       \n",
        "       if df[col].dtypes=='datetime64[ns]':\n",
        "            df = df.drop(columns = col)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547748870
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def replace_gt(x):\n",
        "    x = x.replace('<=','le ')\n",
        "    x = x.replace('>=','ge')\n",
        "    x = x.replace('>','gt ')\n",
        "    x = x.replace('<','lt ')\n",
        "    return x"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547758912
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns = [replace_gt(x) for x in df.columns]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547763342
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "df = df.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(df.loc[:,df.columns !='vBankingFlag'].fillna(0), df['vBankingFlag'].fillna(0), test_size=0.25, random_state=0)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547771122
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "space = {\n",
        "    \"max_depth\": hp.choice(\"max_depth\", np.arange(4,7)),\n",
        "     \"scale_pos_weight\": hp.choice(\"scale_pos_weight\", np.arange(10,21,1)),\n",
        "    \"min_data_in_leaf\": hp.choice(\"min_data_in_leaf\", np.arange(100,500,50)),\n",
        "    \n",
        "}"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547775930
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def hyperparameter_tuning(training_data, training_target):\n",
        "    \n",
        "    def objective(params):\n",
        "    \n",
        "        cv_scores = []\n",
        "        \n",
        "        print('Params testing: ', params)\n",
        "        print('\\n ')\n",
        "\n",
        "        cv = StratifiedKFold(n_splits = 10, shuffle = True, random_state = 42)\n",
        "\n",
        "        for train, val in cv.split(training_data, training_target):\n",
        "        \n",
        "            x_temp, y_temp = training_data.iloc[train].reset_index(drop = True), training_target.iloc[train].reset_index(drop = True)\n",
        "\n",
        "\n",
        "            model_lg = lgb.LGBMClassifier(**params, n_jobs=-1)\n",
        "            model_lg.fit(x_temp, y_temp)\n",
        "            \n",
        "            predictions = model_lg.predict(training_data.iloc[val])\n",
        "\n",
        "            metric = roc_auc_score(training_target.iloc[val], predictions)    \n",
        "\n",
        "            cv_scores.append(metric)\n",
        "\n",
        "        loss = 1 - np.mean(cv_scores)\n",
        "        \n",
        "        return {'loss': loss, 'status': STATUS_OK}\n",
        "\n",
        "    return objective"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547781475
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "objective = hyperparameter_tuning(x_train, y_train)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547788494
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def select_parameters(objective_function, parameter_space, max_evals, prints = True):\n",
        "\n",
        "    trials = Trials()\n",
        "\n",
        "    best_indices = fmin(objective_function,\n",
        "                        parameter_space,\n",
        "                        algo=tpe.suggest,\n",
        "                        trials=trials,\n",
        "                        max_evals=max_evals,\n",
        "                        rstate=np.random.default_rng(42))\n",
        "\n",
        "    best_parameters = space_eval(parameter_space, trials.argmin)\n",
        "\n",
        "    if prints:\n",
        "        print('Best params are:')\n",
        "        print(best_parameters)\n",
        "\n",
        "        #main_plot_history(trials)  \n",
        "\n",
        "    return best_parameters, best_indices, trials"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547791773
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "params, indices, trials = select_parameters(objective, space, 10, prints = True)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "params"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "run.log_table('Best Parameters', params)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "lgb = lgb.LGBMClassifier(**params)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "lgb.fit(x_train,y_train,early_stopping_rounds =10,\\\n",
        "            eval_metric = 'aucpr', eval_set = [(x_test,y_test)],verbose = False)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547850349
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_train,  lgb.predict(x_train)))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547863876
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Accuracy of LightGBM classifier on train set: {:.4f}'.format(lgb.score(x_train, y_train)))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547870143
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test,  lgb.predict(x_test)))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547877811
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Accuracy of LightGBM classifier on test set: {:.4f}'.format(lgb.score(x_test, y_test)))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547887146
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cm = plot_confusion_matrix(lgb,x_train,y_train,display_labels = ['Non vBanking', 'vBanking'])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547891016
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "delFile('images/Confusion_Matrix_train.jpg')\n",
        "cm.figure_.savefig('images/Confusion_Matrix_train.jpg')\n",
        "plt.close()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547895157
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run.log_image('01. Confusion Matrix (train)','images/Confusion_Matrix_train.jpg')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547900347
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cm = plot_confusion_matrix(lgb,x_test,y_test,display_labels = ['Non vBanking', 'vBanking'])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547912401
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "delFile('images/Confusion_Matrix_test.jpg')\n",
        "cm.figure_.savefig('images/Confusion_Matrix_test.jpg')\n",
        "plt.close()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547921568
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run.log_image('02. Confusion Matrix (test)','images/Confusion_Matrix_test.jpg')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547926960
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "logit_roc_auc = roc_auc_score(y_train.to_numpy(), lgb.predict(x_train))\n",
        "fpr, tpr, thresholds = roc_curve(y_train.to_numpy(), lgb.predict_proba(x_train)[:,1])\n",
        "auc_train = roc_auc = auc(fpr, tpr)\n",
        "\n",
        "logit_roc_auc = roc_auc_score(y_test, lgb.predict(x_test))\n",
        "fpr_t, tpr_t, thresholds_t = roc_curve(y_test, lgb.predict_proba(x_test)[:,1])\n",
        "auc_test = roc_auc = auc(fpr_t, tpr_t)\n",
        "cm =plt.figure(figsize = (10,8))\n",
        "\n",
        "plt.plot(fpr, tpr, label='Light GBM - train (area = %0.2f)' % auc_train)\n",
        "plt.plot(fpr_t, tpr_t, label='Light GBM test (area = %0.2f)' % auc_test)\n",
        "plt.plot([0, 1], [0, 1],'r--')\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver operating characteristic')\n",
        "plt.legend(loc=\"lower right\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547932887
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "delFile('images/ROC.jpg')\n",
        "cm.savefig('images/ROC.jpg')\n",
        "plt.close()\n",
        "run.log_image('03. ROC','images/ROC.jpg')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547939928
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#explainer = shap.TreeExplainer(model, x_train)\n",
        "explainer = shap.Explainer(lgb, x_train)\n",
        "shap_values = explainer.shap_values(x_train,check_additivity=False)\n",
        "x_train_array = x_train#.to_numpy() # we need to pass a dense version for the plotting functions"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547964959
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ss= plt.figure()\n",
        "shap.summary_plot(shap_values, x_train_array,x_train.columns,max_display = 20)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648547996565
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "delFile('images/SHAP_Summary.jpg')\n",
        "ss.savefig('images/SHAP_Summary.jpg',bbox_inches='tight')\n",
        "plt.close()\n",
        "run.log_image('04. SHAP - Summary','images/SHAP_Summary.jpg')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648548014346
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bs = plt.figure()\n",
        "shap.plots.beeswarm(explainer(x_train),max_display = 20)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648548063354
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "delFile('images/SHAP_bees.jpg')\n",
        "ss.savefig('images/SHAP_bees.jpg',bbox_inches='tight')\n",
        "plt.close()\n",
        "run.log_image('05. SHAP - Beeswarm','images/SHAP_bees.jpg')"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648548078165
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run.complete()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1648548087939
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3-azureml"
    },
    "kernelspec": {
      "display_name": "Python 3.6 - AzureML",
      "language": "python",
      "name": "python3-azureml"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.9"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}